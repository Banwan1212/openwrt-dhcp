
name: openwrt_dhcp_ddd
on:
  #schedule:
    #- cron: 0 20 * * *
  release:
    types: [published]
    
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions false true'
        required: false
        default: 'false'
  watch:
    types: [started]
    
permissions:
  contents: read
    
env:
  REPO_URL: https://github.com/openwrt/openwrt
  # 分支版本master例如：openwrt-19.07
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  Firmware_Name: OpenWrt-dhcp-ddd
  DIY_P1_SH: config/1.sh
  DIY_P2_SH: config/2.sh
  TZ: Asia/Shanghai 

jobs:
  build:
    name: Build openwrt_dhcp
    runs-on: ubuntu-22.04
        steps:
      - name: 释放Ubuntu磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true 
      
      - name: CPU检测
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
      - name: 准备完成
        uses: actions/checkout@v4

      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }} 

      - name: 下载源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      
      - name: patch1补丁和自定义设置插件源
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
      - name: 更新源 #Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a         

      - name: 安装源 #Install feeds # 更新go插件版本
        run: |
          cd openwrt          
          rm -rf feeds/packages/lang/golang
          git clone https://github.com/sbwml/packages_lang_golang -b 23.x feeds/packages/lang/golang
          ./scripts/feeds install -a

      - name: patch2补丁
        run: |
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
      - name: 自定义设置.config
        run: |
          cd openwrt
          
          rm -f ./.config*
          rm -rf ./tmp && rm -rf .config
          touch ./.config          
          cat >> .config <<EOF 
          CONFIG_VMDK_IMAGES=y
          CONFIG_VHDX_IMAGES=y
          # CONFIG_GRUB_EFI_IMAGES is not set
          # CONFIG_TARGET_ROOTFS_EXT4FS is not set
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=1024

          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-rpc=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_iptables-mod-socket=y
          CONFIG_PACKAGE_iptables-mod-iprange=y
          CONFIG_PACKAGE_iptables-mod-conntrack-extra=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          CONFIG_PACKAGE_dnsmasq_full=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_qrencode=y
          CONFIG_PACKAGE_libqrencode=y
          CONFIG_PACKAGE_block-mount=y
          CONFIG_PACKAGE_cloudflared=y
          
          CONFIG_PACKAGE_docker=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_luci-app-docker=y
          CONFIG_PACKAGE_luci-lib-docker=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_docker-compose=y
          CONFIG_DOCKER_CGROUP_OPTIONS=y
          CONFIG_PACKAGE_docker-compose=y
          CONFIG_PACKAGE_containerd=y
          CONFIG_PACKAGE_runc=y
          CONFIG_DOCKER_NET_MACVLAN=y
          CONFIG_PACKAGE_libnetwork=y
          CONFIG_DOCKER_OPTIONAL_FEATURES=y
          CONFIG_PACKAGE_tini=y
          
          # 文件助手
          CONFIG_PACKAGE_luci-app-fileassistant=y
          CONFIG_PACKAGE_filebrowser=y          
          CONFIG_PACKAGE_luci-app-filebrowser-go=y
          # UPNP
          CONFIG_PACKAGE_luci-app-upnp=y
          # 网络带宽监视器
          CONFIG_PACKAGE_luci-app-nlbwmon=y
          CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn=y
          # smartdns
          CONFIG_PACKAGE_luci-app-smartdns=y
          # 终端
          CONFIG_PACKAGE_luci-app-ttyd=y
          
          # ssr
          # CONFIG_PACKAGE_luci-app-ssr-plus=y
                    
          # python ssr
          CONFIG_PACKAGE_luci-app-ssrserver-python=y
          
          # passwall
          CONFIG_PACKAGE_luci-app-passwall2=y
          CONFIG_PACKAGE_luci-app-passwall=y
         
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          # 内网穿透
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-frps=y
          #ssh连接
          CONFIG_PACKAGE_openssh-sftp-server=y
          # Turbo ACC 加速插件
          # CONFIG_PACKAGE_luci-app-turboacc=y
          # 广告屏蔽大师 Plus+
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_adbyby=y
          CONFIG_PACKAGE_luci-app-adguardhome=y
          CONFIG_PACKAGE_adguardhome=y
          # vpn
          CONFIG_PACKAGE_luci-app-pptp-server=y
          CONFIG_PACKAGE_luci-app-pppoe-server=y
          # DiskMan 磁盘管理
          CONFIG_PACKAGE_blkid=y
          CONFIG_PACKAGE_fdisk=y
          CONFIG_PACKAGE_lsblk=y
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y          
          CONFIG_PACKAGE_smartmontools=y
          # Windows激活
          CONFIG_PACKAGE_vlmcsd=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          # wireguard
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-i18n-wireguard-zh-cn=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_wireguard=y
          CONFIG_PACKAGE_wireguard-tools=y
          CONFIG_PACKAGE_kmod-wireguard=y
          # aria2下载工具
          CONFIG_PACKAGE_luci-app-aria2=y
          # 网络共享（Samba4）
          CONFIG_PACKAGE_luci-app-samba4=y
          # 监控CPU性能
          CONFIG_PACKAGE_netdata=y
          CONFIG_PACKAGE_luci-app-netdata=y
          # 测速
          CONFIG_PACKAGE_luci-app-netspeedtest=y
          CONFIG_PACKAGE_luci-i18n-netspeedtest-zh-cn=y
          #
          CONFIG_PACKAGE_luci-app-zerotier=y
          #视频解码
          CONFIG_PACKAGE_ffmpeg=y
          #重启管理
          CONFIG_PACKAGE_luci-app-watchcat=y
          #端口开方
          CONFIG_PACKAGE_luci-app-natmap=y
          #IP/MAC绑定
          CONFIG_PACKAGE_luci-app-arpbind=y
          #定时任务
          CONFIG_PACKAGE_luci-app-autotimeset=y
          #关机
          CONFIG_PACKAGE_luci-app-poweroffdevice=y
          #实时流量
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          CONFIG_PACKAGE_wrtbwmon=y
          
          EOF
          #
          # ===============================================================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Generate configuration file
        run: |
          cd openwrt
          make defconfig            
      - name: 下载固件包
        id: package
        run: |
          cd openwrt
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;  

      - name: 开始编译固件
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 

      - name: Prepare artifact
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -rf ./.config ./artifact/buildinfo/
          cp -rf ./feeds.conf.default ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}_buildinfo
          path: openwrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}_package
          path: openwrt/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}_firmware
          path: openwrt/artifact/firmware/
      
      - name: Deliver img_gz
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_gz
          path: ./openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz

      - name: Upload firmware to cowtransfer     
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wss --block 2621440 -s -p 64 --no-progress openwrt/artifact/firmware/ 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
